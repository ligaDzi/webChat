{"version":3,"sources":["config.js","utils/socketSingleton.js","utils/helpers.js","ducks/rooms.js","ducks/auth.js","redux/reducer.js","redux/saga.js","redux/index.js","components/rooms/RoomBtn.js","components/common/styles.js","components/common/ErrorFieldTopErr.js","components/rooms/AddRoomForm.js","components/rooms/RoomList.js","components/rooms/ChatTabsMU/TabPanel.js","components/rooms/ChatTabsMU/TabLink.js","components/rooms/ChatTabsMU/styles.js","components/rooms/ChatTabsMU/UserItem.js","components/rooms/ChatTabsMU/ContetRoom.js","components/common/ErrorField.js","components/rooms/ChatTabsMU/SendMessageForm.js","components/rooms/ChatTabsMU/index.js","components/rooms/AllRoom.js","components/common/NavBar.js","components/pages/RoomsPage.js","components/auth/SignInForm.js","components/auth/SignUpForm.js","components/pages/AuthPage.js","components/Root.js","components/routes.js","App.js","index.js"],"names":["appName","SocketSingleton","socket","io","autoConnect","connectSocket","Promise","resolve","reject","connected","open","on","error","disconnectSocket","this","close","arrToMap","arr","Model","Map","reduce","acc","item","set","id","OrderedMap","ReducerRecord","Record","rooms","loading","RoomRecord","name","isActive","newMesSize","users","messages","prefix","ADD_ROOM_REQUEST","ADD_ROOM_SUCCESS","ADD_ROOM_ERROR","FETCH_ROOMS_REQUEST","FETCH_ROOMS_SUCCESS","FETCH_ROOMS_ERROR","FETCH_MESSAGE_ROOM_SUCCESS","FETCH_MESSAGE_ROOM_ERROR","FETCH_USERS_ROOM_SUCCESS","FETCH_USERS_ROOM_ERROR","USER_CONNECT_ROOM_REQUEST","USER_CONNECT_ROOM_SUCCESS","USER_CONNECT_ROOM_ERROR","CLOSE_ROOM_REQUEST","CLOSE_ROOM_SUCCESS","CLOSE_ROOM_ERROR","ADD_MESSAGE_REQUEST","ADD_MESSAGE_SUCCESS","ADD_MESSAGE_ERROR","ADD_USER_ROOM_SUCCESS","ADD_USER_ROOM_ERROR","DEL_USER_ROOM_SUCCESS","DEL_USER_ROOM_ERROR","CHANGE_ACTIVE_ROOM","reducer","state","action","type","payload","update","merge","room","setIn","roomId","updateIn","user","filter","u","userId","message","roomsSelector","createSelector","roomListSelector","valueSeq","toArray","userSelectRoomSelector","authModuleName","selectedRoomSelector","selectedArr","listRoom","forEach","get","push","eventSocket","eventName","eventChannel","emit","handler","data","off","END","getAllRoomListnerSaga","call","roomsChanel","take","put","newRoomListnerSaga","roomChanel","fetchAllRoomsSaga","fork","addRoomSaga","roomName","reset","roomsListnersEvent","userListnerSaga","userChanel","messageListnerSaga","messageChanel","allMessageRoomListnerSaga","allMesRoomChanel","allUserRoomListnerSaga","allUserRoomChanel","leaveUserRoomLstnerSaga","leaveUserRoomChanel","connectUserRoomSaga","allMesRoomTask","allUserRoomTask","messageTask","userTask","leaveUserTask","closeRoomSaga","closeRoomId","cancel","sendMessageSaga","saga","all","takeEvery","UserRedcord","email","moduleName","AUTOENTER_REQUEST","AUTOENTER_SUCCESS","AUTOENTER_ERROR","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_ERROR","SIGN_IN_REQUEST","SIGN_IN_SUCCESS","SIGN_IN_ERROR","SIGN_OUT_REQUEST","SIGN_OUT_SUCCESS","SIGN_OUT_ERROR","concat","autoEnterSiteSaga","fetch","response","json","signUpSaga","JSON","stringify","password","option","method","headers","body","signInSaga","signOutSaga","createRootReducer","combineReducers","form","formReducer","authModule","authReducer","roomReducer","rootSaga","authSaga","roomSaga","sagaMiddleware","createSagaMiddleware","rootReducer","enhancer","applyMiddleware","store","createStore","run","RoomBtn","handleClick","className","onClick","ErrFieldContainer","styled","div","ErrTxt","label","ErrorField","input","htmlFor","autocomplete","placeholder","meta","errTxt","touched","submitFailed","autoComplete","roomArr","createReduxForm","reduxForm","validate","errors","length","handleSubmit","useEffect","onSubmit","Field","component","connect","userModuleName","fetchAllRooms","addRoom","connectUserRoom","handleConnectRoom","includes","map","key","TabPanel","props","children","value","index","other","Typography","role","hidden","aria-labelledby","Box","p","StyledBadge","withStyles","theme","badge","right","top","border","palette","background","paper","padding","Badge","TabLink","handleClose","handleChangeActiveRoom","rest","Tab","badgeContent","color","AbsoluteBlock","ListsSE","ul","ListItemSE","li","EndListItemSE","LITooltipSE","span","MessageColor","UserItem","colorArr","randomColor","luminosity","count","HtmlTooltip","tooltip","backgroundColor","maxWidth","fontSize","typography","pxToRem","Tooltip","ContetRoom","useState","setUsers","listMes","useRef","arrUsers","i","getColorForIndex","current","scrollTop","scrollHeight","messageList","colors","getUserColor","renderListTooltip","Math","random","toString","Date","now","ref","mes","username","text","styles","style","opacity","spring","stiffness","willLeave","willEnter","interpolated","slice","config","title","placement","errorTxt","useStyles","makeStyles","root","width","closeRoom","sendMessage","changeActiveRoom","classes","useTheme","setValue","handleSendMessage","handleChange","event","newValue","AppBar","position","Tabs","onChange","indicatorColor","textColor","variant","aria-label","indexRoom","a11yProps","dir","direction","AllRoom","signOut","to","RoomsPage","path","exact","emailValidator","mapToDispatch","signUp","signIn","decorator","console","autoEnterSite","routes","isAuthenticated","useRoutes","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6d566606.chunk.js","sourcesContent":["\r\n\r\nexport const appName = 'webSocket'\r\nexport const socketServerURL = 'https://webchatsocketio2.herokuapp.com'","import io from 'socket.io-client'\r\nimport { socketServerURL } from '../config'\r\n\r\n\r\nconst SocketSingleton = {\r\n    socket: io(socketServerURL, { autoConnect: false }),\r\n    connectSocket() {  \r\n        return new Promise((resolve, reject) => {\r\n            try {\r\n                if (!this.socket.connected) {\r\n                    this.socket.open()\r\n\r\n                    this.socket.on(\"connect\", () => {\r\n                        resolve(this.socket)\r\n                    })\r\n\r\n                } else {\r\n                    resolve(this.socket)\r\n                }\r\n                \r\n            } catch (error) {\r\n                reject(error)\r\n            }\r\n        }) \r\n    },\r\n    disconnectSocket() {\r\n        if (this.socket.connected) {\r\n            this.socket.close()\r\n        }\r\n    }\r\n}\r\n\r\nexport default SocketSingleton","import { OrderedMap, Map } from 'immutable'\r\n\r\nexport const arrToMap = (arr, Model = Map) => {\r\n\r\n    return arr.reduce(\r\n        (acc, item) => acc.set( item.id, new Model(item) ),\r\n        new OrderedMap({})\r\n    );\r\n}\r\n\r\nexport const mapToArr = map => {\r\n\r\n    return map.valueSeq().toArray();\r\n}\r\n\r\nexport const getRandomId = () => `${Math.random().toString()}${Date.now().toString()}`","import { appName } from '../config'\r\nimport { Record, OrderedMap } from 'immutable'\r\nimport { put, call, take, fork, all, takeEvery, cancel } from 'redux-saga/effects'\r\nimport { eventChannel, END } from 'redux-saga'\r\nimport { reset } from 'redux-form'\r\nimport { createSelector } from 'reselect'\r\nimport SocketSingleton from '../utils/socketSingleton'\r\nimport { arrToMap, mapToArr } from '../utils/helpers'\r\nimport { moduleName as authModuleName } from './auth'\r\n\r\n\r\n\r\n/**\r\n * Constants\r\n */\r\nexport const ReducerRecord = Record({\r\n    rooms: new OrderedMap({}),\r\n    error: null,\r\n    loading: false\r\n})\r\n\r\nexport const RoomRecord = Record({\r\n    id: null,\r\n    name: null,\r\n    isActive: false,\r\n    newMesSize: 0,\r\n    users: [],\r\n    messages: []\r\n})\r\n\r\n\r\nexport const moduleName = 'room'\r\nconst prefix = `${appName}/${moduleName}`\r\n\r\nexport const ADD_ROOM_REQUEST = `${prefix}/ADD_ROOM_REQUEST`\r\nexport const ADD_ROOM_SUCCESS = `${prefix}/ADD_ROOM_SUCCESS`\r\nexport const ADD_ROOM_ERROR = `${prefix}/ADD_ROOM_ERROR`\r\n\r\nexport const FETCH_ROOMS_REQUEST = `${prefix}/FETCH_ROOMS_REQUEST`\r\nexport const FETCH_ROOMS_SUCCESS = `${prefix}/FETCH_ROOMS_SUCCESS`\r\nexport const FETCH_ROOMS_ERROR = `${prefix}/FETCH_ROOMS_ERROR`\r\n\r\nexport const FETCH_MESSAGE_ROOM_SUCCESS = `${prefix}/FETCH_MESSAGE_ROOM_SUCCESS`\r\nexport const FETCH_MESSAGE_ROOM_ERROR = `${prefix}/FETCH_MESSAGE_ROOM_ERROR`\r\n\r\nexport const FETCH_USERS_ROOM_SUCCESS = `${prefix}/FETCH_USERS_ROOM_SUCCESS`\r\nexport const FETCH_USERS_ROOM_ERROR = `${prefix}/FETCH_USERS_ROOM_ERROR`\r\n\r\nexport const USER_CONNECT_ROOM_REQUEST = `${prefix}/USER_CONNECT_ROOM_REQUEST`\r\nexport const USER_CONNECT_ROOM_SUCCESS = `${prefix}/USER_CONNECT_ROOM_SUCCESS`\r\nexport const USER_CONNECT_ROOM_ERROR = `${prefix}/USER_CONNECT_ROOM_ERROR`\r\n\r\nexport const CLOSE_ROOM_REQUEST = `${prefix}/CLOSE_ROOM_REQUEST`\r\nexport const CLOSE_ROOM_SUCCESS = `${prefix}/CLOSE_ROOM_SUCCESS`\r\nexport const CLOSE_ROOM_ERROR = `${prefix}/CLOSE_ROOM_ERROR`\r\n\r\nexport const ADD_MESSAGE_REQUEST = `${prefix}/ADD_MESSAGE_REQUEST`\r\nexport const ADD_MESSAGE_SUCCESS = `${prefix}/ADD_MESSAGE_SUCCESS`\r\nexport const ADD_MESSAGE_ERROR = `${prefix}/ADD_MESSAGE_ERROR`\r\n\r\nexport const ADD_USER_ROOM_SUCCESS = `${prefix}/ADD_USER_ROOM_SUCCESS`\r\nexport const ADD_USER_ROOM_ERROR = `${prefix}/ADD_USER_ROOM_ERROR`\r\n\r\nexport const DEL_USER_ROOM_SUCCESS = `${prefix}/DEL_USER_ROOM_SUCCESS`\r\nexport const DEL_USER_ROOM_ERROR = `${prefix}/DEL_USER_ROOM_ERROR`\r\n\r\nexport const CHANGE_ACTIVE_ROOM = `${prefix}/CHANGE_ACTIVE_ROOM`\r\n\r\n\r\n/**\r\n * Reducer\r\n */\r\nexport default function reducer(state = new ReducerRecord(), action) {\r\n\r\n    const { type, payload, error } = action\r\n\r\n    switch(type) {\r\n        case FETCH_ROOMS_REQUEST:\r\n        case USER_CONNECT_ROOM_REQUEST:            \r\n            return state\r\n                .set('loading', true)\r\n\r\n        case FETCH_ROOMS_SUCCESS:\r\n            return state\r\n                .set('loading', false)\r\n                .update('rooms', rooms => arrToMap(payload.rooms, RoomRecord).merge(rooms))\r\n                .set('error', null)\r\n\r\n        case ADD_ROOM_SUCCESS:\r\n            return state\r\n                .set('loading', false)\r\n                .update('rooms', rooms => rooms.merge(arrToMap([payload.room], RoomRecord)))\r\n                .set('error', null)\r\n\r\n        case USER_CONNECT_ROOM_SUCCESS:\r\n            return state\r\n                .set('loading', false)\r\n                .setIn(['rooms', payload.roomId, 'newMesSize'], 0)\r\n                .set('error', null)\r\n\r\n        case ADD_USER_ROOM_SUCCESS:\r\n            return state\r\n                .updateIn(['rooms', payload.roomId, 'users'], users => [...users, payload.user])\r\n                .set('error', null)\r\n\r\n        case DEL_USER_ROOM_SUCCESS:\r\n            return state\r\n                .updateIn(['rooms', payload.roomId, 'users'], users => users.filter(u => u.id !== payload.userId))\r\n                .set('error', null)\r\n\r\n        case CLOSE_ROOM_SUCCESS:\r\n            return state\r\n                .updateIn(['rooms', payload.roomId, 'users'], users => [])\r\n\r\n\r\n        case ADD_MESSAGE_SUCCESS:\r\n            return state\r\n                .updateIn(['rooms', payload.roomId, 'messages'], messages => [...messages, payload.message])\r\n                .updateIn(['rooms', payload.roomId, 'newMesSize'], newMesSize => (newMesSize + 1))\r\n                .set('error', null)\r\n\r\n        case FETCH_MESSAGE_ROOM_SUCCESS:\r\n            return state\r\n                .setIn(['rooms', payload.roomId, 'messages'], payload.messages)\r\n\r\n        case FETCH_USERS_ROOM_SUCCESS:\r\n            return state\r\n                .setIn(['rooms', payload.roomId, 'users'], payload.users)\r\n\r\n        case FETCH_ROOMS_ERROR:\r\n        case ADD_ROOM_ERROR:\r\n        case ADD_MESSAGE_ERROR:\r\n        case USER_CONNECT_ROOM_ERROR:\r\n        case ADD_USER_ROOM_ERROR:\r\n        case DEL_USER_ROOM_ERROR:\r\n        case FETCH_USERS_ROOM_ERROR:\r\n        case FETCH_MESSAGE_ROOM_ERROR:\r\n            return state\r\n                .set('loading', false)\r\n                .set('error', error)\r\n        \r\n        case CLOSE_ROOM_ERROR:\r\n            return state.set('error', error)\r\n\r\n        case CHANGE_ACTIVE_ROOM:\r\n            return state\r\n                .setIn(['rooms', payload.roomId, 'newMesSize'], 0)\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Selectors\r\n */\r\nexport const stateSelector = state => state[moduleName]\r\nexport const authStateSelector = state => state[authModuleName]\r\nexport const roomsSelector = createSelector(stateSelector, state => state.rooms)\r\nexport const roomListSelector = createSelector(roomsSelector, rooms => mapToArr(rooms))\r\n\r\n// Вернуть чат-комнаты пользователя\r\nexport const userSelectRoomSelector = createSelector(authStateSelector, state => state.user.rooms)\r\nexport const selectedRoomSelector = createSelector(roomsSelector, userSelectRoomSelector, (rooms, selectedArr) => {\r\n\r\n    let listRoom = []  \r\n      \r\n    selectedArr.forEach(roomId => {\r\n        if (rooms.get(roomId)) listRoom.push(rooms.get(roomId))\r\n    })\r\n    return listRoom\r\n})\r\n\r\n \r\n/**\r\n * Action Creators\r\n */\r\nexport function fetchAllRooms(userId) {\r\n    return {\r\n        type: FETCH_ROOMS_REQUEST,\r\n        payload: { userId }\r\n    }\r\n}\r\n\r\nexport function addRoom(roomName) {\r\n    return {\r\n        type: ADD_ROOM_REQUEST,\r\n        payload: { roomName }\r\n    }\r\n}\r\n\r\nexport function connectUserRoom(userId, roomId) {\r\n\treturn {\r\n\t\ttype: USER_CONNECT_ROOM_REQUEST,\r\n\t\tpayload: { userId, roomId }\r\n\t}\r\n}\r\n\r\nexport function closeRoom(roomId) {\r\n    return {\r\n        type: CLOSE_ROOM_REQUEST,\r\n        payload: { roomId }\r\n    }\r\n}\r\n\r\nexport function sendMessage(user, roomId, message) {\r\n\treturn {\r\n\t\ttype: ADD_MESSAGE_REQUEST,\r\n\t\tpayload: { user, roomId, message }\r\n\t}\r\n}\r\n\r\nexport function changeActiveRoom(roomId) {\r\n    return {\r\n        type: CHANGE_ACTIVE_ROOM,\r\n        payload: { roomId }\r\n    }\r\n}\r\n\r\n\r\n\r\n/**\r\n * Sagas\r\n */\r\nconst eventSocket = (socket, eventName) => eventChannel(emit => {\r\n\tconst handler = data => emit(data)\r\n    socket.on(eventName, handler)\r\n    \r\n\treturn () => {\r\n        socket.off(eventName, handler)\r\n        emit(END)\r\n    }\r\n})\r\n\r\nconst getAllRoomListnerSaga = function * ({ socket }) {\r\n    const roomsChanel = yield call(eventSocket, socket, 'getAllRoom')\r\n\r\n    try {\r\n\r\n        while (true) {\r\n            const { rooms, error } = yield take(roomsChanel)\r\n    \r\n            if (rooms) {\r\n                yield put({\r\n                    type: FETCH_ROOMS_SUCCESS,\r\n                    payload: { rooms }\r\n                })\r\n                yield call([roomsChanel, roomsChanel.close])\r\n            } else {\r\n                throw(error)\r\n            }\r\n        }\r\n    } catch (error) {  \r\n        yield put({\r\n            type: FETCH_ROOMS_ERROR,\r\n            error\r\n        })        \r\n    } finally {\r\n        yield call([roomsChanel, roomsChanel.close])\r\n    }\r\n}\r\n\r\nconst newRoomListnerSaga = function * ({ socket }) {\r\n    const roomChanel = yield call(eventSocket, socket, 'newRoom')\r\n\r\n    try {\r\n\r\n        while (true) {\r\n            const { room, error } = yield take(roomChanel)\r\n\r\n            if (room) {\r\n                yield put({\r\n                    type: ADD_ROOM_SUCCESS,\r\n                    payload: { room }\r\n                })\r\n\r\n            } else {\r\n                throw(error)\r\n            }    \r\n        }\r\n    } catch (error) {  \r\n        yield put({\r\n            type: ADD_ROOM_ERROR,\r\n            error\r\n        })        \r\n    } finally {\r\n        yield call([roomChanel, roomChanel.close])\r\n    }\r\n}\r\n\r\nconst fetchAllRoomsSaga = function * (action) {\r\n    try {\r\n        const socket = yield call([SocketSingleton, SocketSingleton.connectSocket])\r\n        \r\n        yield fork(getAllRoomListnerSaga, { socket })\r\n        yield fork(newRoomListnerSaga, { socket })\r\n\r\n        const { userId } = action.payload\r\n        socket.emit('allRoom', { userId })\r\n\r\n    } catch (error) {\r\n        yield put({\r\n            type: FETCH_ROOMS_ERROR,\r\n            error\r\n        })        \r\n    }\r\n}\r\n\r\nconst addRoomSaga = function * (action) {\r\n    try {\r\n        const { roomName } = action.payload\r\n\r\n        const socket = yield call([SocketSingleton, SocketSingleton.connectSocket])\r\n\r\n        socket.emit('newRoom', roomName)\r\n\r\n        yield put(reset('addroom'))\r\n\r\n    } catch (error) {\r\n        yield put({\r\n            type: ADD_ROOM_ERROR,\r\n            error\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nlet roomsListnersEvent = {}\r\n\r\nconst userListnerSaga = function * ({ socket, roomId }) {\r\n\r\n    const userChanel = yield call(eventSocket, socket, `user-${roomId}`)\r\n    try {\r\n\r\n        while (true) {\r\n            const { user, error } = yield take(userChanel)\r\n\r\n            if (user) {\r\n                yield put({\r\n                    type: ADD_USER_ROOM_SUCCESS,\r\n                    payload: { roomId, user }\r\n                })\r\n            } else {\r\n                throw(error)\r\n            }    \r\n        }\r\n        \r\n    } catch (error) {    \r\n        yield put({\r\n            type: ADD_USER_ROOM_ERROR,\r\n            error\r\n        })        \r\n    } finally {\r\n        yield call([userChanel, userChanel.close])\r\n    }\r\n}\r\n\r\nconst messageListnerSaga = function * ({ socket, roomId }) {\r\n\r\n    const messageChanel = yield call(eventSocket, socket, `message-${roomId}`)\r\n    try {\r\n\r\n        while (true) {\r\n            const { message, error } = yield take(messageChanel)\r\n\r\n            if (message) {\r\n                yield put({\r\n                    type: ADD_MESSAGE_SUCCESS,\r\n                    payload: {\r\n                        roomId,\r\n                        message: message\r\n                    }\r\n                })\r\n            } else {\r\n                throw(error)\r\n            }    \r\n        }\r\n    } catch (error) {  \r\n        yield put({\r\n            type: ADD_MESSAGE_ERROR,\r\n            error\r\n        })        \r\n    } finally {\r\n        yield call([messageChanel, messageChanel.close])\r\n    }\r\n}\r\n\r\nconst allMessageRoomListnerSaga = function * ({ socket, roomId }) {\r\n\r\n    const allMesRoomChanel = yield call(eventSocket, socket, `getAllMesRoom-${roomId}`)\r\n    try {\r\n\r\n        while (true) {\r\n            const { messages, error } = yield take(allMesRoomChanel)\r\n\r\n            if (messages) {\r\n                yield put({\r\n                    type: FETCH_MESSAGE_ROOM_SUCCESS,\r\n                    payload: { roomId, messages }\r\n                })\r\n            } else {\r\n                throw(error)\r\n            } \r\n        }\r\n        \r\n    } catch (error) {\r\n        yield put({\r\n            type: FETCH_MESSAGE_ROOM_ERROR,\r\n            error\r\n        })\r\n    } finally {\r\n        yield call([allMesRoomChanel, allMesRoomChanel.close])\r\n    }\r\n}\r\n\r\nconst allUserRoomListnerSaga = function * ({ socket, roomId }) {\r\n    const allUserRoomChanel = yield call(eventSocket, socket, `getAllUserRoom-${roomId}`)\r\n\r\n    try {\r\n        while (true) {\r\n            const { users, error } = yield take(allUserRoomChanel)\r\n\r\n            if (users) {\r\n                yield put({\r\n                    type: FETCH_USERS_ROOM_SUCCESS,\r\n                    payload: { roomId, users }\r\n                })\r\n            } else {\r\n                throw(error)\r\n            }\r\n        }\r\n        \r\n    } catch (error) {\r\n        yield put({\r\n            type: FETCH_USERS_ROOM_ERROR,\r\n            error\r\n        })        \r\n    } finally {\r\n        yield call([allUserRoomChanel, allUserRoomChanel.close])\r\n    }\r\n}\r\n\r\nconst leaveUserRoomLstnerSaga = function * ({ socket, roomId }) {\r\n    const leaveUserRoomChanel = yield call(eventSocket, socket, `leaveUser=${roomId}`)\r\n\r\n    try {\r\n        while (true) {\r\n            const { userId, error } = yield take(leaveUserRoomChanel)\r\n\r\n            if (userId) {\r\n                yield put({\r\n                    type: DEL_USER_ROOM_SUCCESS,\r\n                    payload: { roomId, userId }\r\n                })\r\n            } else {\r\n                throw(error)\r\n            }\r\n        }\r\n        \r\n    } catch (error) {\r\n        yield put({\r\n            type: DEL_USER_ROOM_ERROR,\r\n            error\r\n        })        \r\n    } finally {\r\n        yield call([leaveUserRoomChanel, leaveUserRoomChanel.close])\r\n    }\r\n}\r\n\r\n\r\nconst connectUserRoomSaga = function * (action) {\r\n\r\n    try {\r\n        const { userId, roomId } = action.payload\r\n\r\n        const socket = yield call([SocketSingleton, SocketSingleton.connectSocket])\r\n    \r\n        socket.emit('join', { userId, roomId })\r\n\r\n        if (!roomsListnersEvent[roomId])  roomsListnersEvent[roomId] = {}\r\n        \r\n        if (!roomsListnersEvent[roomId].allMesRoomTask) {\r\n            const allUserRoomTask = yield fork(allUserRoomListnerSaga, { socket, roomId })\r\n            roomsListnersEvent[roomId].allUserRoomTask = allUserRoomTask\r\n\r\n            const allMesRoomTask = yield fork(allMessageRoomListnerSaga, { socket, roomId })\r\n            roomsListnersEvent[roomId].allMesRoomTask = allMesRoomTask\r\n\r\n            const messageTask = yield fork(messageListnerSaga, { socket, roomId })\r\n            roomsListnersEvent[roomId].messageTask = messageTask\r\n\r\n            const userTask = yield fork(userListnerSaga, { socket, roomId })\r\n            roomsListnersEvent[roomId].userTask = userTask\r\n\r\n            const leaveUserTask = yield fork(leaveUserRoomLstnerSaga, { socket, roomId })\r\n            roomsListnersEvent[roomId].leaveUserTask = leaveUserTask\r\n        }\r\n\r\n        yield put({\r\n            type: USER_CONNECT_ROOM_SUCCESS,\r\n            payload: { roomId }\r\n        })\r\n        \r\n    } catch (error) { \r\n        yield put({\r\n            type: USER_CONNECT_ROOM_ERROR,\r\n            error\r\n        })\r\n    }\r\n}\r\n\r\nconst closeRoomSaga = function * (action) {\r\n    try {\r\n        const { roomId } = action.payload\r\n\r\n        const socket = yield call([SocketSingleton, SocketSingleton.connectSocket])\r\n\r\n        socket.emit(`close-room-${roomId}`, { closeRoomId: roomId }) \r\n\r\n        yield cancel(roomsListnersEvent[roomId].allUserRoomTask)\r\n        yield cancel(roomsListnersEvent[roomId].allMesRoomTask)\r\n        yield cancel(roomsListnersEvent[roomId].userTask)\r\n        yield cancel(roomsListnersEvent[roomId].messageTask)\r\n        yield cancel(roomsListnersEvent[roomId].leaveUserTask)\r\n        if (roomsListnersEvent[roomId]) delete roomsListnersEvent[roomId]        \r\n        \r\n        yield put({\r\n            type: CLOSE_ROOM_SUCCESS,\r\n            payload: { roomId }\r\n        })\r\n        \r\n    } catch (error) {\r\n        yield put({\r\n            type: CLOSE_ROOM_ERROR,\r\n            error\r\n        })         \r\n    }\r\n}\r\n\r\nconst sendMessageSaga = function * (action) {\r\n    try {\r\n        const { user, roomId, message } = action.payload\r\n\r\n        const socket = yield call([SocketSingleton, SocketSingleton.connectSocket])\r\n\r\n        socket.emit(`message-${roomId}`, { user, message })\r\n\r\n        yield put(reset('message'))\r\n\r\n    } catch (error) {\r\n        yield put({\r\n            type: ADD_MESSAGE_ERROR,\r\n            error\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const saga = function * () {\r\n    yield all([        \r\n        takeEvery(FETCH_ROOMS_REQUEST, fetchAllRoomsSaga),\r\n        takeEvery(ADD_ROOM_REQUEST, addRoomSaga),\r\n        takeEvery(USER_CONNECT_ROOM_REQUEST, connectUserRoomSaga),\r\n        takeEvery(CLOSE_ROOM_REQUEST, closeRoomSaga),\r\n        takeEvery(ADD_MESSAGE_REQUEST, sendMessageSaga)\r\n    ])\r\n}","import { appName } from '../config'\r\nimport { Record } from 'immutable'\r\nimport { put, call, all, takeEvery } from 'redux-saga/effects'\r\nimport { reset } from 'redux-form'\r\nimport { USER_CONNECT_ROOM_SUCCESS, CLOSE_ROOM_SUCCESS } from './rooms'\r\nimport { createSelector } from 'reselect'\r\nimport SocketSingleton from '../utils/socketSingleton'\r\n\r\n\r\n/**\r\n * Constants\r\n */\r\nexport const UserRedcord = Record({\r\n    id: null,\r\n    name: null,\r\n    email: null,\r\n    rooms: []\r\n})\r\nexport const ReducerRecord = Record({\r\n    user: null,\r\n    error: null,\r\n    loading: false\r\n})\r\n\r\nexport const moduleName = 'auth'\r\nexport const AUTOENTER_REQUEST = `${appName}/${moduleName}/AUTOENTER_REQUEST`\r\nexport const AUTOENTER_SUCCESS = `${appName}/${moduleName}/AUTOENTER_SUCCESS`\r\nexport const AUTOENTER_ERROR = `${appName}/${moduleName}/AUTOENTER_ERROR`\r\nexport const SIGN_UP_REQUEST = `${appName}/${moduleName}/SIGN_UP_REQUEST`\r\nexport const SIGN_UP_SUCCESS = `${appName}/${moduleName}/SIGN_UP_SUCCESS`\r\nexport const SIGN_UP_ERROR = `${appName}/${moduleName}/SIGN_UP_ERROR`\r\nexport const SIGN_IN_REQUEST = `${appName}/${moduleName}/SIGN_IN_REQUEST`\r\nexport const SIGN_IN_SUCCESS = `${appName}/${moduleName}/SIGN_IN_SUCCESS`\r\nexport const SIGN_IN_ERROR = `${appName}/${moduleName}/SIGN_IN_ERROR`\r\nexport const SIGN_OUT_REQUEST = `${appName}/${moduleName}/SIGN_OUT_REQUEST`\r\nexport const SIGN_OUT_SUCCESS = `${appName}/${moduleName}/SIGN_OUT_SUCCESS`\r\nexport const SIGN_OUT_ERROR = `${appName}/${moduleName}/SIGN_OUT_ERROR`\r\n\r\n\r\n/**\r\n * Reducer\r\n */\r\nexport default function reducer(state = new ReducerRecord(), action) {\r\n\r\n    const { type, payload, error } = action\r\n\r\n    switch(type) {\r\n        case AUTOENTER_REQUEST:\r\n        case SIGN_IN_REQUEST:\r\n        case SIGN_UP_REQUEST:\r\n            return state.set('loading', true)\r\n\r\n        case AUTOENTER_SUCCESS:\r\n        case SIGN_IN_SUCCESS:\r\n        case SIGN_UP_SUCCESS:\r\n            return state\r\n                .set('loading', false)\r\n                .set('user', new UserRedcord(payload.user))\r\n                .set('error', null)\r\n\r\n        case AUTOENTER_ERROR:\r\n            return state\r\n                .set('loading', false)\r\n\r\n        case SIGN_IN_ERROR:\r\n        case SIGN_UP_ERROR:\r\n        case SIGN_OUT_ERROR:\r\n            return state\r\n                .set('loading', false)\r\n                .set('error', error)\r\n\r\n        case SIGN_OUT_SUCCESS:\r\n            return new ReducerRecord({})\r\n\r\n        case USER_CONNECT_ROOM_SUCCESS:\r\n            return state\r\n                .updateIn(['user', 'rooms'], rooms => rooms.concat(payload.roomId))\r\n\r\n        case CLOSE_ROOM_SUCCESS:\r\n            return state\r\n                .updateIn(['user', 'rooms'], rooms => rooms.filter(id => id !== payload.roomId))\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Selectors\r\n */\r\nexport const stateSelector = state => state[moduleName]\r\nexport const roomsSelector = createSelector(stateSelector, state => state.user.rooms)\r\n\r\n \r\n/**\r\n * Action Creators\r\n */\r\nexport function autoEnterSite() {\r\n    return {\r\n        type: AUTOENTER_REQUEST\r\n    }\r\n}\r\n\r\nexport function signUp(name, email, password) {\r\n    return {\r\n        type: SIGN_UP_REQUEST,\r\n        payload: { name, email, password }\r\n    }\r\n}\r\n\r\nexport function signIn(email, password) {\r\n    return {\r\n        type: SIGN_IN_REQUEST,\r\n        payload: { email, password }\r\n    }\r\n}\r\n\r\nexport function signOut() {\r\n    return {\r\n        type: SIGN_OUT_REQUEST\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Sagas\r\n */\r\nconst autoEnterSiteSaga = function * (action) {\r\n    try {        \r\n        const response = yield fetch('/api/auth/autoenter')\r\n        const data = yield call(\r\n            [response, response.json]\r\n        )\r\n\r\n        if (data.user) {\r\n            yield put({\r\n                type: AUTOENTER_SUCCESS,\r\n                payload: { user: data.user }\r\n            }) \r\n        } else {            \r\n            yield put({\r\n                type: AUTOENTER_ERROR\r\n            }) \r\n        }\r\n    } catch (error) {\r\n        yield put({\r\n            type: AUTOENTER_ERROR\r\n        })          \r\n    }\r\n}\r\n\r\nconst signUpSaga = function * (action) {\r\n    try {\r\n        const option = {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json'\r\n            },\r\n            body: yield call(\r\n                [JSON, JSON.stringify],\r\n                {\r\n                    name: action.payload.name, \r\n                    email: action.payload.email,  \r\n                    password: action.payload.password  \r\n                }\r\n            )\r\n        } \r\n\r\n        const response = yield fetch('/api/auth/register', option)\r\n        const data = yield call(\r\n            [response, response.json]\r\n        )\r\n\r\n        yield put( reset('auth') )\r\n        \r\n        if (data.user) {\r\n            yield put({\r\n                type: SIGN_UP_SUCCESS,\r\n                payload: { user: data.user }\r\n            })\r\n        } else {\r\n            yield put({\r\n                type: SIGN_UP_ERROR,\r\n                error: data.message\r\n            })\r\n        }\r\n        \r\n    } catch (error) {\r\n        yield put({\r\n            type: SIGN_UP_ERROR,\r\n            error\r\n        })        \r\n    }    \r\n}\r\n\r\nconst signInSaga = function * (action) {\r\n    try {\r\n\r\n        const option = {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json'\r\n            },\r\n            body: yield call(\r\n                [JSON, JSON.stringify],\r\n                { \r\n                    email: action.payload.email,  \r\n                    password: action.payload.password  \r\n                }\r\n            )\r\n        } \r\n\r\n        const response = yield fetch('/api/auth/login', option)\r\n        const data = yield call(\r\n            [response, response.json]\r\n        )\r\n\r\n        yield put( reset('auth') )   \r\n\r\n        if (data.user) {\r\n            yield put({\r\n                type: SIGN_IN_SUCCESS,\r\n                payload: { user: data.user }\r\n            })\r\n        } else {\r\n            yield put({\r\n                type: SIGN_IN_ERROR,\r\n                error: data.message\r\n            })\r\n        }\r\n        \r\n    } catch (error) {\r\n        yield put({\r\n            type: SIGN_IN_ERROR,\r\n            error\r\n        })\r\n    }\r\n}\r\n\r\nconst signOutSaga = function * (action) {\r\n    try {        \r\n        yield fetch('/api/auth/logout') \r\n\r\n        yield call([SocketSingleton, SocketSingleton.disconnectSocket])\r\n        \r\n        yield put({\r\n            type: SIGN_OUT_SUCCESS\r\n        }) \r\n    } catch (error) {\r\n        yield put({\r\n            type: SIGN_OUT_ERROR\r\n        })          \r\n    }\r\n}\r\n\r\n\r\n\r\nexport const saga = function * () {\r\n    yield all([\r\n        takeEvery(AUTOENTER_REQUEST, autoEnterSiteSaga),\r\n        takeEvery(SIGN_UP_REQUEST, signUpSaga),\r\n        takeEvery(SIGN_IN_REQUEST, signInSaga),\r\n        takeEvery(SIGN_OUT_REQUEST, signOutSaga)\r\n    ])\r\n}","import { combineReducers } from 'redux'\r\nimport { reducer as formReducer} from 'redux-form'\r\nimport authReducer, { moduleName as authModule } from '../ducks/auth'\r\nimport roomReducer, { moduleName as roomModuleName } from '../ducks/rooms'\r\n\r\n\r\nconst createRootReducer = () => combineReducers({\r\n    form: formReducer,\r\n    [authModule]: authReducer,\r\n    [roomModuleName]: roomReducer\r\n})\r\n\r\nexport default createRootReducer","import { all } from 'redux-saga/effects'\r\nimport { saga as authSaga } from '../ducks/auth'\r\nimport { saga as roomSaga} from '../ducks/rooms'\r\n\r\n\r\nexport default function * rootSaga() {\r\n    yield all([\r\n        authSaga(),\r\n        roomSaga()\r\n    ])\r\n}","import { createStore, applyMiddleware } from 'redux'\r\nimport createRootReducer from './reducer'\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport rootSaga from './saga'\r\n\r\nconst sagaMiddleware = createSagaMiddleware()\r\nconst rootReducer = createRootReducer()\r\nconst enhancer = applyMiddleware(sagaMiddleware)\r\nconst store = createStore(rootReducer, enhancer)\r\n\r\nsagaMiddleware.run(rootSaga)\r\n\r\nexport default store","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport './style.sass'\r\n\r\nconst RoomBtn = ({ room, handleClick }) => {\r\n    return (\r\n        <p className='room-btn'>\r\n            <button \r\n                onClick={() => handleClick(room.id)}\r\n            >\r\n                    { room.name }\r\n            </button>\r\n        </p>\r\n    )\r\n}\r\n\r\nRoomBtn.propTypes = {\r\n    //From Component\r\n    room: PropTypes.object.isRequired,\r\n    handleClick: PropTypes.func.isRequired\r\n}\r\n\r\nexport default RoomBtn\r\n","import styled from 'styled-components'\r\n\r\nexport const ErrFieldContainer = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n`\r\n\r\nexport const ErrTxt = styled.label`    \r\n    color: #bf0018;\r\n    font-size: 14px;\r\n    font-weight: 900;\r\n`","import React from 'react'\r\n\r\nimport { ErrFieldContainer, ErrTxt } from './styles'\r\n\r\nimport './style.sass'\r\n\r\nconst ErrorField = ({ input, type, htmlFor, id, className, autocomplete, placeholder, meta: { error, touched, submitFailed } }) => {\r\n       \r\n    let errTxt = submitFailed && error\r\n    \r\n    return (\r\n        <ErrFieldContainer>\r\n            <ErrTxt>{ errTxt }</ErrTxt>\r\n            <input \r\n                {...input} \r\n                className={className} \r\n                id={id} \r\n                type={type} \r\n                autoComplete={autocomplete} \r\n                placeholder={placeholder}\r\n            />\r\n        </ErrFieldContainer>\r\n    )\r\n}\r\n\r\nexport default ErrorField\r\n","import React, { useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { reduxForm, Field } from 'redux-form'\r\n\r\nimport ErrorField from '../common/ErrorFieldTopErr'\r\n\r\nlet roomArr = []\r\n\r\nconst AddRoomForm = ({ handleSubmit, rooms }) => {\r\n    \r\n    useEffect(() => {\r\n        roomArr = rooms\r\n    }, [rooms])\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <Field \r\n                name='roomName' \r\n                id='roomName' \r\n                className=\"room-add\" \r\n                htmlFor=\"roomName\" \r\n                type='text' \r\n                autocomplete=\"off\"\r\n                placeholder='Add Room'\r\n                component={ErrorField} \r\n            />           \r\n        </form>\r\n    )\r\n}\r\n\r\nAddRoomForm.propTypes = {\r\n    //from Component\r\n    handleSubmit: PropTypes.func.isRequired,\r\n    rooms: PropTypes.array\r\n\r\n}\r\n\r\nconst validate = ({ roomName }) => {\r\n    const errors = {}\r\n\r\n    if (!roomName) errors.roomName = 'room name is required'\r\n    else if (roomName.length > 30) errors.roomName = 'to big'\r\n\r\n    roomArr.forEach(room => {\r\n        if (room.name === roomName) {\r\n            errors.roomName = 'room with that name already exists'\r\n            return\r\n        }\r\n    })\r\n\r\n    return errors\r\n}\r\n\r\nconst createReduxForm = reduxForm({ form: 'addroom', validate })\r\n\r\nexport default createReduxForm(AddRoomForm)\r\n","import React, { useEffect } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\n\r\nimport { fetchAllRooms, addRoom, connectUserRoom, roomListSelector } from '../../ducks/rooms'\r\nimport { moduleName as userModuleName } from '../../ducks/auth'\r\n\r\nimport RoomBtn from './RoomBtn'\r\nimport AddRoomForm from './AddRoomForm'\r\n\r\nimport './style.sass'\r\n\r\n\r\nconst RoomList = ({ user, rooms, fetchAllRooms, addRoom, connectUserRoom }) => {\r\n\r\n    useEffect(() => {\r\n        fetchAllRooms(user.id)\r\n    }, [fetchAllRooms, user])\r\n\r\n    const handleAddNewRoom = ({ roomName }) => {\r\n        addRoom(roomName)\r\n    }\r\n\r\n    const handleConnectRoom = roomId => {\r\n        if (!user.rooms.includes(roomId)) {\r\n            connectUserRoom(user.id, roomId)\r\n        }\r\n    }\r\n    \r\n\r\n    return (        \r\n        <div className='room-list'>\r\n            <nav>\r\n                { rooms.map(room => <RoomBtn key={room.id} room={room} handleClick={handleConnectRoom} /> ) }\r\n            </nav>\r\n            <AddRoomForm rooms={rooms} onSubmit={handleAddNewRoom} />\r\n        </div>\r\n    )\r\n}\r\n\r\nRoomList.propTypes = {\r\n    //From store\r\n    rooms: PropTypes.array,\r\n    user: PropTypes.object,\r\n    fetchAllRooms: PropTypes.func.isRequired,\r\n    connectUserRoom: PropTypes.func.isRequired,\r\n    addRoom: PropTypes.func.isRequired\r\n}\r\n\r\nexport default connect(state => ({\r\n    user: state[userModuleName].user,\r\n    rooms: roomListSelector(state)\r\n}), {\r\n    fetchAllRooms,\r\n    addRoom,\r\n    connectUserRoom\r\n})(RoomList)\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Box from '@material-ui/core/Box'\r\n\r\nfunction TabPanel(props) {\r\n    const { children, value, index, ...other } = props\r\n\r\n\r\n    return (\r\n        <Typography\r\n            component=\"div\"\r\n            role=\"tabpanel\"\r\n            hidden={value !== index}\r\n            id={`full-width-tabpanel-${index}`}\r\n            aria-labelledby={`full-width-tab-${index}`}\r\n            {...other}\r\n        >\r\n            {value === index && <Box p={3}>{children}</Box>}\r\n        </Typography>\r\n    )\r\n}\r\n\r\nTabPanel.propTypes = {\r\n    //from Component\r\n    children: PropTypes.node,\r\n    index: PropTypes.any.isRequired,\r\n    value: PropTypes.any.isRequired,\r\n}\r\n\r\nexport default TabPanel","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport Tab from '@material-ui/core/Tab'\r\nimport Badge from '@material-ui/core/Badge'\r\nimport { withStyles } from '@material-ui/core/styles'\r\nimport MailIcon from '@material-ui/icons/Mail'\r\n\r\n\r\nconst StyledBadge = withStyles(theme => ({\r\n    badge: {\r\n        right: 22,\r\n        top: 18,\r\n        border: `2px solid ${theme.palette.background.paper}`,\r\n        padding: '0 4px',\r\n    },\r\n}))(Badge)\r\n\r\n\r\n\r\nconst TabLink = props => {\r\n    const { handleClose, newMesSize, isActive, handleChangeActiveRoom, ...rest } = props\r\n\r\n\r\n    const renderArrivedNewMes = () => {\r\n\r\n        if (isActive || newMesSize <= 0) return null\r\n\r\n        return (            \r\n            <StyledBadge badgeContent={newMesSize} color=\"secondary\">\r\n                <MailIcon />\r\n            </StyledBadge>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <p>\r\n                <Tab {...rest} onClick={handleChangeActiveRoom} />\r\n            </p>  \r\n            { renderArrivedNewMes() }\r\n            <button onClick={handleClose}>X</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nTabLink.propTypes = {\r\n    //from Component\r\n    handleClose: PropTypes.func.isRequired,\r\n    handleChangeActiveRoom: PropTypes.func.isRequired,\r\n    isActive: PropTypes.bool,\r\n    newMesSize: PropTypes.number\r\n}\r\n\r\nexport default TabLink\r\n","import styled from 'styled-components'\r\n\r\nexport const AbsoluteBlock = styled.div`\r\n    position: absolute;\r\n    top: 15px;\r\n    bottom: 0;\r\n    right: 30px;  \r\n    overflow-y: hidden;\r\n`\r\n\r\nexport const ListsSE = styled.ul`\r\n    position: sticky;\r\n    top: 0;\r\n    padding: 0;\r\n    margin: 0;\r\n    text-align: right;\r\n    overflow: auto;\r\n`\r\n\r\nexport const ListItemSE = styled.li`\r\n    font-size: 8px;\r\n    cursor: default;\r\n    transition: font-size 0.1s;\r\n    color: ${props => props.color || 'inherit'}; \r\n\r\n    &:hover {\r\n        font-size: 14px;  \r\n    }\r\n\r\n`\r\n\r\nexport const EndListItemSE = styled.li`\r\n    font-size: 16px;\r\n    cursor: default;\r\n\r\n    &:hover {\r\n        color: #24c851;\r\n    }\r\n`\r\n\r\nexport const LITooltipSE = styled.span`\r\n    padding: 5px;\r\n    color: ${props => props.color || 'inherit'};\r\n`\r\n\r\nexport const MessageColor = styled.div`\r\n    display: flex;\r\n    padding-bottom: 15px;\r\n    padding-right: 200px;\r\n    color: ${props => props.color || 'inherit'};\r\n\r\n    & h5 {\r\n        display: block;\r\n        margin: 0;\r\n        padding-right: 10px;\r\n    }\r\n\r\n    & div {\r\n        line-height: 1.8;\r\n    }\r\n`","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport { ListItemSE } from './styles'\r\n\r\nconst UserItem = ({ user }) => {\r\n    return (\r\n        <ListItemSE color={user.color}>{user.name}</ListItemSE>\r\n    )\r\n}\r\n\r\nUserItem.propTypes = {\r\n    //from Component\r\n    user: PropTypes.object\r\n}\r\n\r\nexport default UserItem\r\n","import React, { useEffect, useState, useRef } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { withStyles } from '@material-ui/core/styles'\r\nimport Tooltip from '@material-ui/core/Tooltip'\r\nimport randomColor from 'randomcolor'\r\nimport {TransitionMotion, spring} from 'react-motion'\r\n\r\nimport { getRandomId } from '../../../utils/helpers'\r\n\r\nimport UserItem from './UserItem'\r\nimport { AbsoluteBlock, ListsSE, EndListItemSE, LITooltipSE, MessageColor } from './styles'\r\n\r\nlet colorArr = randomColor({    \r\n   luminosity: 'dark',\r\n   count: 100\r\n})\r\n\r\n\r\nconst HtmlTooltip = withStyles(theme => ({\r\n    tooltip: {\r\n        backgroundColor: '#f5f5f9',\r\n        color: 'rgba(0, 0, 0, 0.87)',\r\n        maxWidth: 600,\r\n        fontSize: theme.typography.pxToRem(12),\r\n        border: '1px solid #dadde9',\r\n    },\r\n}))(Tooltip)\r\n\r\n\r\nconst ContetRoom = ({ room }) => {\r\n\r\n    const [users, setUsers] = useState([])\r\n    const listMes = useRef(null)\r\n\r\n\r\n    useEffect(() => {\r\n        const arrUsers = room.users.map((user, i) => ( \r\n            {\r\n                ...user, \r\n                color: getColorForIndex(i)\r\n            }\r\n        ))\r\n        setUsers(arrUsers)\r\n    }, [room.users])\r\n\r\n    useEffect(() => {\r\n        listMes.current.scrollTop = listMes.current.scrollHeight\r\n    }, [room.messages])\r\n\r\n\r\n    const getColorForIndex = index => {\r\n\r\n        if ((index + 1) > colorArr.length) {\r\n            const colors = randomColor({ luminosity: 'dark', count: 100 })\r\n            colorArr = colorArr.concat(colors)\r\n        }\r\n        return colorArr[index]\r\n    }\r\n\r\n    const getUserColor = name => {\r\n        let color = null\r\n        users.forEach(user => {\r\n            if (user.name === name) {\r\n                color = user.color\r\n                return\r\n            }\r\n        })\r\n        return color\r\n    }\r\n\r\n    const renderMessageList = messageList => {\r\n        if (messageList.length <= 0)\r\n            return null\r\n        else \r\n            return messageList.map((mes, i) => (\r\n                <MessageColor key={mes.id} color={getUserColor(mes.username)}>\r\n                    <h5>{mes.username}:</h5>\r\n                    <div>{mes.text}</div>\r\n                </MessageColor>\r\n            ))\r\n    }\r\n\r\n    const renderListTooltip = users => (        \r\n        <div>\r\n            {users.map(user => \r\n                <LITooltipSE key={getRandomId()} color={user.color}>\r\n                    {user.name}\r\n                </LITooltipSE>)}\r\n        </div>\r\n    )  \r\n    \r\n    const getStyles = () => {\r\n        return users.map(user => ({\r\n            style: {\r\n                opacity: spring(1, {stiffness: 50})\r\n            },\r\n            key: user.id,\r\n            data: user\r\n        }))\r\n    }\r\n\r\n    const willLeave = () => ({\r\n        opacity: spring(0, {stiffness: 100})\r\n    })\r\n\r\n    const willEnter = () => ({\r\n        opacity: 0\r\n    })\r\n  \r\n    return (\r\n        <>\r\n            <div ref={listMes}>\r\n                { renderMessageList(room.messages) }\r\n            </div>\r\n            <AbsoluteBlock>\r\n                <ListsSE>\r\n                    <TransitionMotion\r\n                        styles={getStyles()}\r\n                        willLeave={willLeave}\r\n                        willEnter={willEnter}                    \r\n                    >\r\n                        {interpolated => (\r\n                            <div>\r\n                                {\r\n                                    interpolated.slice(0, 42).map((config, i) => {\r\n                                        if (i <= 40) {\r\n                                            return (\r\n                                                <div key={config.key} style={config.style}>\r\n                                                    <UserItem user={config.data} />\r\n                                                </div>\r\n                                            )\r\n                                        } else {\r\n                                            return (\r\n                                                <HtmlTooltip\r\n                                                    title={renderListTooltip(users)}\r\n                                                    placement=\"left-end\"\r\n                                                >\r\n                                                    <EndListItemSE>...{users.length}</EndListItemSE>                        \r\n                                                </HtmlTooltip> \r\n                                            )\r\n                                        }\r\n                                    })\r\n                                }\r\n                            </div>\r\n                        )}\r\n                    </TransitionMotion>\r\n                </ListsSE>\r\n            </AbsoluteBlock>\r\n        </>\r\n    )\r\n}\r\n\r\nContetRoom.propTypes = {\r\n    //From Component\r\n    room: PropTypes.object.isRequired\r\n}\r\n\r\nexport default ContetRoom\r\n","import React from 'react'\r\n\r\nconst ErrorField = ({ input, type, htmlFor, id, className, autocomplete, meta: {error, touched} }) => {\r\n   \r\n\r\n    const errorTxt = touched && error && <div style={{color: 'red'}}>{ error }</div>\r\n\r\n    return (\r\n        <div className=\"input-field col s12\">\r\n            <input {...input} className={className} id={id} type={type} autoComplete={autocomplete} />\r\n            <label htmlFor={htmlFor}>{input.name}</label>\r\n            {errorTxt}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ErrorField\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { reduxForm, Field } from 'redux-form'\r\n\r\nimport ErrorField from '../../common/ErrorField'\r\n\r\nconst SendMessageForm = ({ handleSubmit }) => {\r\n\r\n    return (\r\n        <form className='col s12' onSubmit={ handleSubmit }>\r\n            <div className='row'>\r\n                <Field \r\n                    name='message' \r\n                    id='send_message' \r\n                    className=\"validate\" \r\n                    htmlFor=\"send_message\" \r\n                    type='text' \r\n                    autocomplete=\"off\"\r\n                    component={ErrorField} \r\n                />\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nSendMessageForm.propTypes = {\r\n    //From Component\r\n    handleSubmit: PropTypes.func.isRequired\r\n}\r\n\r\nconst validate = ({ message }) => {\r\n    const errors = {}\r\n\r\n    if (!message) errors.message = 'message is required'\r\n    else if (message.length > 1024) errors.message = 'to big'\r\n\r\n    return errors\r\n}\r\n\r\nconst createReduxForm = reduxForm({ form: 'message', validate })\r\n\r\nexport default createReduxForm(SendMessageForm)\r\n","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles'\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport Tabs from '@material-ui/core/Tabs'\r\n\r\nimport { moduleName as authModuleName } from '../../../ducks/auth'\r\nimport { selectedRoomSelector, closeRoom, sendMessage, changeActiveRoom } from '../../../ducks/rooms'\r\n\r\nimport TabPanel from './TabPanel'\r\nimport TabLink from './TabLink'\r\nimport ContetRoom from './ContetRoom'\r\nimport SendMessageForm from './SendMessageForm'\r\n\r\nimport './style.sass'\r\n\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `full-width-tab-${index}`,\r\n    'aria-controls': `full-width-tabpanel-${index}`,\r\n  }\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    width: '75%',\r\n  },\r\n}))\r\n\r\n\r\n\r\nfunction ChatTabs(props) {\r\n  const { user, rooms, closeRoom, sendMessage, changeActiveRoom } = props  \r\n  const classes = useStyles()\r\n  const theme = useTheme()\r\n  const [value, setValue] = useState(0)\r\n\r\n  const handleCloseRoom = (roomId, indexRoom) => {\r\n    closeRoom(roomId)\r\n    \r\n    if (value !== indexRoom && indexRoom < value && value > 0) setValue(value => (value - 1))\r\n    else if (value === indexRoom && value > 0) setValue(value => (value - 1))\r\n    \r\n  }\r\n\r\n  const handleSendMessage = ({ message }) => {\r\n    sendMessage(user, rooms[value].id, message)\r\n  }\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue)\r\n  }\r\n\r\n  const handleChangeActiveRoom = (roomId) => {\r\n    changeActiveRoom(roomId)\r\n  }\r\n\r\n  const setActiveRoom = (index, roomId) => {\r\n    if (value === index) {\r\n      changeActiveRoom(roomId)\r\n      return true\r\n    } else {\r\n      return false\r\n    }\r\n  }\r\n\r\n  const showTab = () => (\r\n        <>          \r\n          <AppBar position=\"static\" color=\"default\">\r\n            <Tabs\r\n              value={value}\r\n              onChange={handleChange}\r\n              indicatorColor=\"primary\"\r\n              textColor=\"primary\"\r\n              variant=\"scrollable\"\r\n              aria-label=\"full width tabs example\"\r\n            >\r\n              {rooms.map((room, i) => (\r\n                <TabLink \r\n                  key={room.id} \r\n                  label={room.name}               \r\n                  handleClose={() => handleCloseRoom(room.id, i)}\r\n                  handleChangeActiveRoom={() => handleChangeActiveRoom(room.id)}\r\n                  isActive={setActiveRoom(i, room.id)}\r\n                  newMesSize={room.newMesSize}\r\n                  {...a11yProps(i)} \r\n                />\r\n              ))}\r\n            </Tabs>\r\n          </AppBar>\r\n          {rooms.map((room, i) => (\r\n            <TabPanel \r\n              key={room.id} \r\n              value={value} index={i} dir={theme.direction}\r\n            >\r\n              <ContetRoom room={room} />\r\n            </TabPanel>\r\n          ))}\r\n          <SendMessageForm onSubmit={handleSendMessage} />\r\n        </>    \r\n  )\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <h2>ChatTabs</h2>\r\n      {rooms.length > 0 ? showTab() : null}\r\n    </div>\r\n  )\r\n}\r\n\r\nChatTabs.propTypes = {\r\n  //From store\r\n  user: PropTypes.object,\r\n  rooms: PropTypes.array,\r\n  closeRoom: PropTypes.func.isRequired,\r\n  sendMessage: PropTypes.func.isRequired,\r\n  changeActiveRoom: PropTypes.func.isRequired\r\n}\r\n\r\nexport default connect(state => ({\r\n  user: state[authModuleName].user,\r\n  rooms: selectedRoomSelector(state)\r\n\r\n}), {\r\n  closeRoom,\r\n  sendMessage,\r\n  changeActiveRoom\r\n})(ChatTabs)","import React from 'react'\r\n\r\nimport RoomList from './RoomList'\r\nimport ChatTabs from './ChatTabsMU'\r\n\r\nimport './style.sass'\r\n\r\nconst AllRoom = () => {\r\n    return (\r\n        <div className='room-content'>\r\n            <RoomList />\r\n            <ChatTabs />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AllRoom\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { NavLink, Link } from 'react-router-dom'\r\n\r\nimport { signOut } from '../../ducks/auth'\r\n\r\nimport './style.sass'\r\n\r\nconst NavBar = ({ signOut }) => {\r\n    return (\r\n        <nav>\r\n            <div className=\"nav-wrapper darken-2 padding-navbar\">\r\n                <span className=\"brand-logo\">ChatRoom</span>\r\n                <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\r\n                    <li><NavLink to=\"/rooms/all\">All room</NavLink></li>\r\n                    <li><Link to='/' onClick={() => signOut()}>Logout</Link></li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nNavBar.propTypes = {\r\n    //from store\r\n    signOut: PropTypes.func.isRequired\r\n}\r\n\r\nexport default connect(state => ({\r\n\r\n}), {\r\n    signOut\r\n})(NavBar)\r\n","import React from 'react'\r\nimport { Route } from 'react-router-dom'\r\n\r\nimport AllRoom from '../rooms/AllRoom'\r\nimport NavBar from '../common/NavBar'\r\n\r\nconst RoomsPage = () => {\r\n\r\n    return (\r\n        <div> \r\n            <NavBar />\r\n            <Route path='/rooms/all' exact>\r\n                <AllRoom />\r\n            </Route>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RoomsPage","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { reduxForm, Field } from 'redux-form'\r\nimport emailValidator from 'email-validator'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport ErrorField from '../common/ErrorField'\r\n\r\nimport './style.sass'\r\n\r\nconst SignInForm = ({ handleSubmit }) => {\r\n    \r\n    return (\r\n        <div className='row'>\r\n            <h2>login</h2>\r\n            <form className='col s12' onSubmit={ handleSubmit }>\r\n                <div className=\"row\">\r\n                    <Field name='email' id='email' className=\"validate\" htmlFor=\"email\" type='email' component={ErrorField} />\r\n                </div>\r\n                <div className='row'>\r\n                    <Field name='password' id='password' className=\"validate\" htmlFor=\"password\" type='password' component={ErrorField} />\r\n                </div>\r\n                <Link to='/auth/register'>Registaration</Link>\r\n                <div>\r\n                    <input className='btn blue lighten-2 btn-marg' type='submit' value='login' />\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nSignInForm.propTypes = {\r\n    //form Component\r\n    handleSubmit: PropTypes.func.isRequired\r\n}\r\n\r\nconst validate = ({ email, password }) => {\r\n    const errors = {}\r\n\r\n    if (!email) errors.email = 'email is required'\r\n    else if (!emailValidator.validate(email)) errors.email = 'invalid email'\r\n\r\n    if (!password) errors.password = 'password is required'\r\n    else if (password.length < 6) errors.password = 'to short'\r\n\r\n    return errors\r\n}\r\n\r\nconst createReduxForm = reduxForm({ form: 'auth', validate })\r\n\r\nexport default createReduxForm(SignInForm)\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { reduxForm, Field } from 'redux-form'\r\nimport emailValidator from 'email-validator'\r\n\r\nimport ErrorField from '../common/ErrorField'\r\n\r\nconst SignUpForm = ({ handleSubmit }) => {\r\n    return (\r\n        <div className='row'>\r\n            <h2>Registaration</h2>\r\n            <form className='col s12' onSubmit={ handleSubmit }>\r\n                <div className='row'>\r\n                    <Field name='name' id='name' className=\"validate\" htmlFor=\"name\" type='text' component={ErrorField} />\r\n                </div>\r\n                <div className=\"row\">\r\n                    <Field name='email' id='email' className=\"validate\" htmlFor=\"email\" type='email' component={ErrorField} />\r\n                </div>\r\n                <div className='row'>\r\n                    <Field name='password' id='password' className=\"validate\" htmlFor=\"password\" type='password' component={ErrorField} />\r\n                </div>\r\n                <div>\r\n                    <input className='btn blue lighten-2 btn-marg' type='submit' value='Registaration' />\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nSignUpForm.propTypes = {\r\n    //from Component\r\n    handleSubmit: PropTypes.func.isRequired\r\n}\r\n\r\nconst validate = ({ name, email, password }) => {\r\n    const errors = {}\r\n\r\n    if (!name) errors.name = 'name is required'\r\n    else if (name.length > 30) errors.name = 'name to big'\r\n\r\n    if (!email) errors.email = 'email is required'\r\n    else if (!emailValidator.validate(email)) errors.email = 'invalid email'\r\n\r\n    if (!password) errors.password = 'password is required'\r\n    else if (password.length < 6) errors.password = 'password to short'\r\n\r\n    return errors\r\n}\r\n\r\nconst createReduxForm = reduxForm({ form: 'auth', validate })\r\n\r\nexport default createReduxForm(SignUpForm)\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from 'react-redux'\r\nimport { Route } from 'react-router-dom'\r\n\r\nimport { signUp, signIn, moduleName } from '../../ducks/auth'\r\n\r\nimport SignInForm from '../auth/SignInForm'\r\nimport SignUpForm from '../auth/SignUpForm'\r\n\r\n\r\nconst AuthPage = ({ user, error, signUp, signIn }) => {\r\n\r\n\r\n    const handleSignIn = ({ email, password }) => signIn(email, password)\r\n    const handleSignUp = ({ name, email, password }) => signUp(name, email, password)\r\n    \r\n    if (error) {\r\n        console.error(`Error: ${error}`)\r\n    }\r\n\r\n    return (\r\n        <div className='container'>           \r\n            <Route  path='/auth/login' exact>\r\n                <SignInForm onSubmit={ handleSignIn } />\r\n            </Route>            \r\n            <Route  path='/auth/register' exact>\r\n                <SignUpForm onSubmit={ handleSignUp } />\r\n            </Route>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nAuthPage.propTypes = {\r\n    //from store\r\n    user: PropTypes.object,\r\n    error: PropTypes.string,\r\n    signUp: PropTypes.func.isRequired,\r\n    signIn: PropTypes.func.isRequired\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        user: state[moduleName].user,\r\n        error: state[moduleName].error\r\n    }\r\n}\r\n\r\nconst mapToDispatch = {\r\n    signUp,\r\n    signIn\r\n}\r\n\r\nconst decorator = connect(mapStateToProps, mapToDispatch);\r\n\r\nexport default decorator(AuthPage)\r\n","import React, { useEffect } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { BrowserRouter as Router } from 'react-router-dom'\r\nimport { useRoutes } from './routes'\r\nimport { autoEnterSite, moduleName } from '../ducks/auth'\r\n\r\nconst Root = ({ user, autoEnterSite }) => {\r\n    \r\n    useEffect(() => {\r\n        autoEnterSite()\r\n    }, [autoEnterSite])\r\n\r\n    const isAuthenticated = !!user\r\n\r\n    const routes = useRoutes(isAuthenticated)\r\n    return (\r\n        <Router>\r\n            <div>\r\n                { routes }\r\n            </div>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default connect((state) => ({    \r\n    user: state[moduleName].user\r\n}), {\r\n    autoEnterSite\r\n})(Root)\r\n","import React from 'react'\r\nimport { Switch, Route, Redirect } from 'react-router-dom'\r\n\r\nimport RoomsPage from './pages/RoomsPage'\r\nimport AuthPage from './pages/AuthPage'\r\n\r\n\r\nexport const useRoutes = isAuthenticated => {\r\n    if (isAuthenticated) {\r\n        return (\r\n            <Switch>\r\n                <Route  path='/rooms'>\r\n                    <RoomsPage />\r\n                </Route>\r\n                <Redirect to='/rooms' />                \r\n            </Switch>\r\n        )\r\n    }\r\n    return (\r\n        <Switch>\r\n            <Route path='/auth'>\r\n                <AuthPage />\r\n            </Route>\r\n            <Redirect to='/auth/login' />\r\n        </Switch>\r\n    )\r\n}","import React from 'react'\r\nimport store from './redux'\r\nimport { Provider } from 'react-redux'\r\n\r\nimport Root from './components/Root'\r\n\r\n\r\nfunction App() {\r\n    return (\r\n        <Provider store = { store }>\r\n            <Root />\r\n        </Provider>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}